一：七大设计原则
1：开闭原则
2：依赖倒置原则
3：单一职责原则
4：接口隔离原则
5：迪米特法则（最少知道原则）
6：里氏替换原则
7：合成复用原则

二：详细
1：开闭原则（openclose）
定义：类、模块、函数，应该对扩展开放，修改关闭。
原则中的扩展指的是对细节的实现，而不是去修改抽象的框架，将公共的底层属性及方法提取到抽象层，用抽象构建框架，用实现扩展细节。
优点：这样用抽象构建起来的框架，直接提高了软件系统的可复用性，间接的提高了代码的可维护性

2：依赖倒置
高层（顶层）：应用层
面向接口（抽象）编程
定义：高层模块不应该依赖底层模块，二者都应该依赖抽象
抽象不应该依赖细节，细节应该依赖抽象
针对接口编程，不要针对实现编程
优点：可以减少类间的耦合性、提高系统的稳定性，代码可读性、可维护性，可降低修改程序所造成的的风险

3：单一职责原则
定义：不要存在多于一个导致类变更的原因，一个类中修改，只有一个修改的原因
也就是说，一个类、接口、方法只负责一项职责
优点：降低类的复杂度、提高类的可读性、提高系统的可维护性、降低变更引起的风险

4：接口隔离原则
定义：用多个专门的接口，而不是使用单一的总接口，客户端不应该依赖它不需要的接口
注意事项：一个类一个类对应一个类的依赖应该建立在最小的接口上
建立单一的接口，不要建立庞大臃肿的解耦
尽量细化接口，接口中的方法尽量少
注意适度原则，一定要适度
优点：复核我们常说的高内聚、低耦合的设计思想
从而使类具有很好的可读性、可扩展性、可维护性

5：迪米特法则（最少知道原则）
定义：一个对象应该对其他对象保持最少的了解，尽量降低类和类之间的耦合
优点：降低类之间的耦合
强调只和朋友交流，不和陌生人说话
朋友：出现在成员变量、方法的输入、输出参数中的类成为成员朋友类，而出现在方法体内部的类不属于朋友类

6：里氏替换原则
定义：一个软件实体如果适用于一个父类的话，那么一定适用其子类。所有引用父类的地方必须能透明的使用其子类的对象，子类对象能替换父类对象，而程序逻辑不变
引申含义：
（1）：子类可以扩展父类的功能，但不能改变父类原有的功能
（2）：子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
（3）：当子类方法重载父类方法时，方法的前置条件（即方法的输入，入参）要比父类方法输入参数更宽松
（4）：当子类方法实现父类方法时（重写、重载、实现抽象方法），方法的后置条件（方法的输出，返回值），要比父类更严格或相等
优点：约束继承泛滥，开闭原则的一种体现
加强程序的健壮性，同时变更时也可以做到非常好的兼容性，提高程序的维护性，扩展性。降低需求变更时引入的风险

7：合成复用原则（组合、聚合复用）
定义：尽量使用对象组合、聚合、而不是继承关系（白箱复用）达到软件复用的目的
聚合has-a和组合contains-a（黑箱复用），继承is-a
优点：可以使系统更加灵活，降低类之间的耦合度，一个类的变化对其他类造成的影响相对较少
通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。
<1>. 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。
<2>. 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。
<3>. 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。
采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。
<1>. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。
<2>. 新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。
<3>. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。

